<?php

/* node_modules/path-parse/test.min.js */
class __TwigTemplate_22ddf2c88a75bfc903273e37e65879e65929a7b6b81faa3e38d9d37ee4767aa6 extends Twig_Template
{
    public function __construct(Twig_Environment $env)
    {
        parent::__construct($env);

        $this->parent = false;

        $this->blocks = array(
        );
    }

    protected function doDisplay(array $context, array $blocks = array())
    {
        $__internal_da40e9e987106e28fd1d6caf962c91f84884da70e309977efe2d2059a9c6b080 = $this->env->getExtension("Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension");
        $__internal_da40e9e987106e28fd1d6caf962c91f84884da70e309977efe2d2059a9c6b080->enter($__internal_da40e9e987106e28fd1d6caf962c91f84884da70e309977efe2d2059a9c6b080_prof = new Twig_Profiler_Profile($this->getTemplateName(), "template", "node_modules/path-parse/test.min.js"));

        // line 1
        echo "var assert=require(\"assert\");var pathParse=require(\"./index\");var winParseTests=[[{root:\"C:\\\\\",dir:\"C:\\\\path\\\\dir\",base:\"index.html\",ext:\".html\",name:\"index\"},\"C:\\\\path\\\\dir\\\\index.html\"],[{root:\"C:\\\\\",dir:\"C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33\",base:\"index\",ext:\"\",name:\"index\"},\"C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33\\\\index\"],[{root:\"\",dir:\"another_path\\\\DIR with spaces\\\\1\\\\2\\\\33\",base:\"index\",ext:\"\",name:\"index\"},\"another_path\\\\DIR with spaces\\\\1\\\\2\\\\33\\\\index\"],[{root:\"\\\\\",dir:\"\\\\foo\",base:\"C:\",ext:\"\",name:\"C:\"},\"\\\\foo\\\\C:\"],[{root:\"\",dir:\"\",base:\"file\",ext:\"\",name:\"file\"},\"file\"],[{root:\"\",dir:\".\",base:\"file\",ext:\"\",name:\"file\"},\".\\\\file\"],[{root:\"\\\\\\\\server\\\\share\\\\\",dir:\"\\\\\\\\server\\\\share\\\\\",base:\"file_path\",ext:\"\",name:\"file_path\"},\"\\\\\\\\server\\\\share\\\\file_path\"],[{root:\"\\\\\\\\server two\\\\shared folder\\\\\",dir:\"\\\\\\\\server two\\\\shared folder\\\\\",base:\"file path.zip\",ext:\".zip\",name:\"file path\"},\"\\\\\\\\server two\\\\shared folder\\\\file path.zip\"],[{root:\"\\\\\\\\teela\\\\admin\$\\\\\",dir:\"\\\\\\\\teela\\\\admin\$\\\\\",base:\"system32\",ext:\"\",name:\"system32\"},\"\\\\\\\\teela\\\\admin\$\\\\system32\"],[{root:\"\\\\\\\\?\\\\UNC\\\\\",dir:\"\\\\\\\\?\\\\UNC\\\\server\",base:\"share\",ext:\"\",name:\"share\"},\"\\\\\\\\?\\\\UNC\\\\server\\\\share\"]];var winSpecialCaseFormatTests=[[{dir:\"some\\\\dir\"},\"some\\\\dir\\\\\"],[{base:\"index.html\"},\"index.html\"],[{},\"\"]];var unixParseTests=[[{root:\"/\",dir:\"/home/user/dir\",base:\"file.txt\",ext:\".txt\",name:\"file\"},\"/home/user/dir/file.txt\"],[{root:\"/\",dir:\"/home/user/a dir\",base:\"another File.zip\",ext:\".zip\",name:\"another File\"},\"/home/user/a dir/another File.zip\"],[{root:\"/\",dir:\"/home/user/a dir/\",base:\"another&File.\",ext:\".\",name:\"another&File\"},\"/home/user/a dir//another&File.\"],[{root:\"/\",dir:\"/home/user/a\$\$\$dir/\",base:\"another File.zip\",ext:\".zip\",name:\"another File\"},\"/home/user/a\$\$\$dir//another File.zip\"],[{root:\"\",dir:\"user/dir\",base:\"another File.zip\",ext:\".zip\",name:\"another File\"},\"user/dir/another File.zip\"],[{root:\"\",dir:\"\",base:\"file\",ext:\"\",name:\"file\"},\"file\"],[{root:\"\",dir:\"\",base:\".\\\\file\",ext:\"\",name:\".\\\\file\"},\".\\\\file\"],[{root:\"\",dir:\".\",base:\"file\",ext:\"\",name:\"file\"},\"./file\"],[{root:\"\",dir:\"\",base:\"C:\\\\foo\",ext:\"\",name:\"C:\\\\foo\"},\"C:\\\\foo\"]];var unixSpecialCaseFormatTests=[[{dir:\"some/dir\"},\"some/dir/\"],[{base:\"index.html\"},\"index.html\"],[{},\"\"]];var errors=[{input:null,message:/Parameter 'pathString' must be a string, not/},{input:{},message:/Parameter 'pathString' must be a string, not object/},{input:true,message:/Parameter 'pathString' must be a string, not boolean/},{input:1,message:/Parameter 'pathString' must be a string, not number/},{input:undefined,message:/Parameter 'pathString' must be a string, not undefined/},];checkParseFormat(pathParse.win32,winParseTests);checkParseFormat(pathParse.posix,unixParseTests);checkErrors(pathParse.win32);checkErrors(pathParse.posix);function checkErrors(a){errors.forEach(function(c){try{a(c.input)}catch(b){assert.ok(b instanceof TypeError);assert.ok(c.message.test(b.message),\"expected \"+c.message+\" to match \"+b.message);return}assert.fail(\"should have thrown\")})}function checkParseFormat(b,a){a.forEach(function(c){assert.deepEqual(b(c[1]),c[0])})};";
        
        $__internal_da40e9e987106e28fd1d6caf962c91f84884da70e309977efe2d2059a9c6b080->leave($__internal_da40e9e987106e28fd1d6caf962c91f84884da70e309977efe2d2059a9c6b080_prof);

    }

    public function getTemplateName()
    {
        return "node_modules/path-parse/test.min.js";
    }

    public function getDebugInfo()
    {
        return array (  22 => 1,);
    }

    public function getSourceContext()
    {
        return new Twig_Source("var assert=require(\"assert\");var pathParse=require(\"./index\");var winParseTests=[[{root:\"C:\\\\\",dir:\"C:\\\\path\\\\dir\",base:\"index.html\",ext:\".html\",name:\"index\"},\"C:\\\\path\\\\dir\\\\index.html\"],[{root:\"C:\\\\\",dir:\"C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33\",base:\"index\",ext:\"\",name:\"index\"},\"C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33\\\\index\"],[{root:\"\",dir:\"another_path\\\\DIR with spaces\\\\1\\\\2\\\\33\",base:\"index\",ext:\"\",name:\"index\"},\"another_path\\\\DIR with spaces\\\\1\\\\2\\\\33\\\\index\"],[{root:\"\\\\\",dir:\"\\\\foo\",base:\"C:\",ext:\"\",name:\"C:\"},\"\\\\foo\\\\C:\"],[{root:\"\",dir:\"\",base:\"file\",ext:\"\",name:\"file\"},\"file\"],[{root:\"\",dir:\".\",base:\"file\",ext:\"\",name:\"file\"},\".\\\\file\"],[{root:\"\\\\\\\\server\\\\share\\\\\",dir:\"\\\\\\\\server\\\\share\\\\\",base:\"file_path\",ext:\"\",name:\"file_path\"},\"\\\\\\\\server\\\\share\\\\file_path\"],[{root:\"\\\\\\\\server two\\\\shared folder\\\\\",dir:\"\\\\\\\\server two\\\\shared folder\\\\\",base:\"file path.zip\",ext:\".zip\",name:\"file path\"},\"\\\\\\\\server two\\\\shared folder\\\\file path.zip\"],[{root:\"\\\\\\\\teela\\\\admin\$\\\\\",dir:\"\\\\\\\\teela\\\\admin\$\\\\\",base:\"system32\",ext:\"\",name:\"system32\"},\"\\\\\\\\teela\\\\admin\$\\\\system32\"],[{root:\"\\\\\\\\?\\\\UNC\\\\\",dir:\"\\\\\\\\?\\\\UNC\\\\server\",base:\"share\",ext:\"\",name:\"share\"},\"\\\\\\\\?\\\\UNC\\\\server\\\\share\"]];var winSpecialCaseFormatTests=[[{dir:\"some\\\\dir\"},\"some\\\\dir\\\\\"],[{base:\"index.html\"},\"index.html\"],[{},\"\"]];var unixParseTests=[[{root:\"/\",dir:\"/home/user/dir\",base:\"file.txt\",ext:\".txt\",name:\"file\"},\"/home/user/dir/file.txt\"],[{root:\"/\",dir:\"/home/user/a dir\",base:\"another File.zip\",ext:\".zip\",name:\"another File\"},\"/home/user/a dir/another File.zip\"],[{root:\"/\",dir:\"/home/user/a dir/\",base:\"another&File.\",ext:\".\",name:\"another&File\"},\"/home/user/a dir//another&File.\"],[{root:\"/\",dir:\"/home/user/a\$\$\$dir/\",base:\"another File.zip\",ext:\".zip\",name:\"another File\"},\"/home/user/a\$\$\$dir//another File.zip\"],[{root:\"\",dir:\"user/dir\",base:\"another File.zip\",ext:\".zip\",name:\"another File\"},\"user/dir/another File.zip\"],[{root:\"\",dir:\"\",base:\"file\",ext:\"\",name:\"file\"},\"file\"],[{root:\"\",dir:\"\",base:\".\\\\file\",ext:\"\",name:\".\\\\file\"},\".\\\\file\"],[{root:\"\",dir:\".\",base:\"file\",ext:\"\",name:\"file\"},\"./file\"],[{root:\"\",dir:\"\",base:\"C:\\\\foo\",ext:\"\",name:\"C:\\\\foo\"},\"C:\\\\foo\"]];var unixSpecialCaseFormatTests=[[{dir:\"some/dir\"},\"some/dir/\"],[{base:\"index.html\"},\"index.html\"],[{},\"\"]];var errors=[{input:null,message:/Parameter 'pathString' must be a string, not/},{input:{},message:/Parameter 'pathString' must be a string, not object/},{input:true,message:/Parameter 'pathString' must be a string, not boolean/},{input:1,message:/Parameter 'pathString' must be a string, not number/},{input:undefined,message:/Parameter 'pathString' must be a string, not undefined/},];checkParseFormat(pathParse.win32,winParseTests);checkParseFormat(pathParse.posix,unixParseTests);checkErrors(pathParse.win32);checkErrors(pathParse.posix);function checkErrors(a){errors.forEach(function(c){try{a(c.input)}catch(b){assert.ok(b instanceof TypeError);assert.ok(c.message.test(b.message),\"expected \"+c.message+\" to match \"+b.message);return}assert.fail(\"should have thrown\")})}function checkParseFormat(b,a){a.forEach(function(c){assert.deepEqual(b(c[1]),c[0])})};", "node_modules/path-parse/test.min.js", "/Users/mikel/Developer/DEV/FrontFoundation/tests/app/node_modules/path-parse/test.min.js");
    }
}
